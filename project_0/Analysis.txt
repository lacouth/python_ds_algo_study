Task 0
    * Worse case complexity: O(1)
    Algorithm:
        * Access the first and the last rows from lists of calls and texts

Task 1
    * Worse case complexity: O(n)
    Algorithm:
        * Sequentially adds elements to a collection

Task 2
    * Worse case complexity: O(n)
    Algorithm:
        I use a dictionary to relate the phone numbers and time, which gives a time complexity linear, O(n). 
        After the insertion, the function max finds the phone number with the largest time, and this process has O(n) time complexity.
        In the end, the total time complexity for the algorithm is O(n) + O(n) = O(2n) which in practice is O(n).

Task3,
    * Worse case complexity: O(n log n)
    Algorithm:
        I used a for loop to get all the phone numbers in the file and test them if they match de conditions, 
        put all the matches in a set to avoid repetition, this operation is O(n). To order the numbers I opted the sorted() function,
        which uses TimSort as sorting algorithm, and has time complexity of O(n log n), in the end O(n) + O(n log n) is O(n log n);

Task4,
    * Worse case complexity: O(n log n) 
    Algorithm:
        To avoid repetitions I used three sets to isolate the numbers, the addition operation is O(n), after that I use twice the difference()
        method to separate the numbers that only appear as callers, the time complexity of this operation is, also, O(n) + O(n) = O(n). To print the remaining
        numbers in lexicographic order I use the sorted() function that has time complexity of O(n log n), in the end O(n) + O(n log n) is only
        O(n log n).


